% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/storage_provider.R
\name{dbi_storage_provider}
\alias{dbi_storage_provider}
\title{DBI-Backed Exam Storage}
\usage{
dbi_storage_provider(
  conn,
  attempts_table,
  section_data_table,
  hash_user = FALSE,
  hash_key = TRUE
)
}
\arguments{
\item{conn}{a \link[DBI:DBIConnection-class]{DBIConnection} object, as returned by \link[DBI:dbConnect]{dbConnect()}}

\item{attempts_table}{the name of the table to store the attempts data in.}

\item{section_data_table}{the name of the table to store the section data in.}

\item{hash_user}{store the user id as a SHA256 HMAC to protect the identity.}

\item{hash_key}{if \code{hash_user=TRUE}, the pre-shared secret key. If \code{TRUE} (the default), uses the concatenated
\emph{exam_id} and \emph{exam_version}. If \code{NULL}, uses no HMAC but a plain SHA256 hash of the user id
(\strong{strongly discouraged}). Anything else is cast to \link[base:character]{character}
(or kept as \link[base:raw]{raw} vector) and used as key.}
}
\description{
Store exam data in an SQL database using DBI.
\strong{Note that exam data may contain sensitive information.}
To avoid potential privacy issues, the DBI storage provider supports hashing the user id, but this may require
external identification of users for grading.
}
\details{
Attempts are stored in a table which requires the following columns:
\describe{
\item{\code{attempt_id}}{a unique identifier (a UUID) for the attempt, stored as character data.}
\item{\code{user_id}}{stored as character data. The required length depends on the authentication provider and if
hashing is used.}
\item{\code{exam_id}}{stored as character data. Ensure it can hold enough characters for the exam ids used in your exams.}
\item{\code{exam_version}}{stored as character data. Ensure it can hold enough characters for the exam version strings
used in your exams.}
\item{\code{started_at}}{the UTC time at which the attempt was started.}
\item{\code{finished_at}}{the UTC time at which the attempt was finished.}
\item{\code{user_obj}}{the user object (\emph{less the identifier}) as returned by the authentication provider stored as character
data of arbitrary length.}
\item{\code{points}}{the points awarded for the attempt, as character data of arbitrary length.}
}

Exam data is stored in a table which requires the following columns:

\describe{
\item{\code{attempt}}{the attempt identifier of type \emph{UUID}.}
\item{\code{section}}{the section identifier, as character data.}
\item{\code{saved_at}}{the UTC time at which the section data was last saved (of type \emph{TIMESTAMP}).}
\item{\code{section_data}}{stored as character data of arbitrary length.}
}

A sample definition of the tables for PostgreSQL is as follows:\preformatted{CREATE TABLE attempts (
  attempt_id UUID PRIMARY KEY,
  user_id character varying(256) NOT NULL,
  exam_id character varying(64) NOT NULL,
  exam_version character varying(64) NOT NULL,
  started_at timestamp NOT NULL DEFAULT current_timestamp,
  seed integer NOT NULL,
  user_obj text NOT NULL,
  finished_at timestamp,
  points text);

CREATE INDEX attempts_index ON attempts
  (user_id, exam_id, exam_version);

CREATE TABLE section_data (
  id serial PRIMARY KEY,
  attempt_id UUID NOT NULL REFERENCES attempts (attempt)
    ON DELETE CASCADE ON UPDATE CASCADE,
  section character varying (256) NOT NULL,
  saved_at timestamp NOT NULL DEFAULT current_timestamp,
  section_data text);

CREATE INDEX section_data_index ON section_data
  (attempt_d, section);
}
}
